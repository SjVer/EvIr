<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>EvIr</string>
    <key>scopeName</key>
    <string>source.evir</string>
    <key>fileTypes</key>
    <array>
      <string>evir</string>
    </array>
    <key>firstLineMatch</key>
    <string>^#!/.*\bevir\b</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#comment</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#metadata</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#declaration</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#label</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#instruction</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#expression</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#invalid</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>type</key>
      <dict>
        <key>name</key>
        <string>storage.type.evir</string>
        <key>match</key>
        <string>(?:i\.(?:s|u)\.[0-9]+|f\.(?:64|32|16)|v)\**</string>
      </dict>
      <key>metadata</key>
      <dict>
        <key>name</key>
        <string>meta.metadata.evir</string>
        <key>begin</key>
        <string>(\!)\s*([A-Za-z_][A-Za-z_0-9]*\s*\/\s*)*([A-Za-z_][A-Za-z_0-9]*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.control.metadata.evir</string>
          </dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.metadata.evir</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#map</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#constant</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>$\n?</string>
      </dict>
      <key>map</key>
      <dict>
        <key>name</key>
        <string>meta.map.evir</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.mapping.begin.evir</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.key-value.evir</string>
            <key>match</key>
            <string>:</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.continuation.evir</string>
            <key>match</key>
            <string>,</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.mapping.end.evir</string>
          </dict>
        </dict>
      </dict>
      <key>constant</key>
      <dict>
        <key>name</key>
        <string>entity.name.function.option.evir</string>
        <key>match</key>
        <string>:[A-Za-z_][A-Za-z_0-9]*</string>
      </dict>
      <key>declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.declaration.top-level.evir</string>
            <key>begin</key>
            <string>^\s*[A-Za-z_][A-Za-z_0-9]*\s+(?:((?:i\.(?:s|u)\.[0-9]+|f\.(?:64|32|16)|v)\**)|(\S*))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.evir</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.evir</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>invalid.illegal.evir</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.parameters.evir</string>
                <key>begin</key>
                <string>\(</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.section.parameters.begin.evir</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>name</key>
                    <string>variable.parameter.evir</string>
                    <key>match</key>
                    <string>(?:i\.(?:s|u)\.[0-9]+|f\.(?:64|32|16)|v)\**</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#invalid</string>
                  </dict>
                </array>
                <key>end</key>
                <string>\)\s*(?=$\n?)</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.section.parameters.end.evir</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#invalid</string>
              </dict>
            </array>
            <key>end</key>
            <string>$\n?</string>
          </dict>
        </array>
      </dict>
      <key>label</key>
      <dict>
        <key>name</key>
        <string>meta.label.evir</string>
        <key>begin</key>
        <string>#\s*(?:[A-Za-z_][A-Za-z_0-9]*|\b[0-9]+(?:\.[0-9]*)?\b|\b0b[0-1]+\b|\b0c[0-7]+\b|\b0x[0-9a-fA-F]+\b)</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.label.evir</string>
          </dict>
        </dict>
        <key>end</key>
        <string>-&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.label.evir</string>
          </dict>
        </dict>
      </dict>
      <key>instruction</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>~br</string>
            <key>name</key>
            <string>keyword.control.flow.branch.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>~condbr</string>
            <key>name</key>
            <string>keyword.control.flow.conditional-branch.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>~ret</string>
            <key>name</key>
            <string>keyword.control.flow.return.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>=disp</string>
            <key>name</key>
            <string>keyword.dispose.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>=store</string>
            <key>name</key>
            <string>keyword.store.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>=malloc</string>
            <key>name</key>
            <string>keyword.malloc.evir</string>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#label-ref</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#number</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string-char</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#invalid</string>
          </dict>
        </array>
      </dict>
      <key>operator</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\$sh(l|r)</string>
            <key>name</key>
            <string>keyword.operator.bitwise.shift.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$cmp(eq|neq|le|ge|l|g|nz)</string>
            <key>name</key>
            <string>keyword.operator.comparison.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$l(not|and|or|xor)</string>
            <key>name</key>
            <string>keyword.operator.logical.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$b(and|or|xor|not)</string>
            <key>name</key>
            <string>keyword.operator.bitwise.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$decr</string>
            <key>name</key>
            <string>keyword.operator.decrement.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$incr</string>
            <key>name</key>
            <string>keyword.operator.increment.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$(mul|div|sub|add|mod)</string>
            <key>name</key>
            <string>keyword.operator.arithmetic.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$(ref|deref)</string>
            <key>name</key>
            <string>keyword.operator.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\$call</string>
            <key>name</key>
            <string>keyword.call.evir</string>
          </dict>
        </array>
      </dict>
      <key>array</key>
      <dict>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.brackets.begin.evir</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>punctuation.separator.continuation.evir</string>
            <key>match</key>
            <string>\,</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.section.brackets.begin.evir</string>
          </dict>
        </dict>
      </dict>
      <key>label-ref</key>
      <dict>
        <key>match</key>
        <string>&amp;([A-Za-z_][A-Za-z_0-9]*|\b[0-9]+(?:\.[0-9]*)?\b|\b0b[0-1]+\b|\b0c[0-7]+\b|\b0x[0-9a-fA-F]+\b)</string>
        <key>scope</key>
        <string>keyword.operator.label-ref.evir</string>
      </dict>
      <key>variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>%[A-Za-z_][A-Za-z_0-9]*</string>
            <key>name</key>
            <string>variable.evir</string>
          </dict>
          <dict>
            <key>match</key>
            <string>%[0-9]+</string>
            <key>name</key>
            <string>variable.parameter.evir</string>
          </dict>
        </array>
      </dict>
      <key>number</key>
      <dict>
        <key>name</key>
        <string>constant.numeric.evir</string>
        <key>match</key>
        <string>\b\b[0-9]+(?:\.[0-9]*)?\b|\b0b[0-1]+\b|\b0c[0-7]+\b|\b0x[0-9a-fA-F]+\b\b</string>
      </dict>
      <key>string-char</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.quoted.double.evir</string>
            <key>begin</key>
            <string>"</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.evir</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string_placeholder</string>
              </dict>
            </array>
            <key>end</key>
            <string>"</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.evir</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>string.quoted.single.evir</string>
            <key>begin</key>
            <string>'</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.evir</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#string_escaped_char</string>
              </dict>
            </array>
            <key>end</key>
            <string>'</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.evir</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>name</key>
        <string>comment.line.evir</string>
        <key>match</key>
        <string>;.*$</string>
      </dict>
      <key>string_escaped_char</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.character.escape.evir</string>
            <key>match</key>
            <string>\\(a|b|e|f|n|r|t|v|\\|'|"|0)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.unknown-escape.evir</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>string_placeholder</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.other.placeholder.evi</string>
            <key>match</key>
            <string>(?x)%
  (\d+\$)?                                      # field (argument #)
  [#0\- +']*                                    # flags
  [,;:_]?                                       # separator character (AltiVec)
  ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
  (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
  (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
  (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.placeholder.evi</string>
            <key>match</key>
            <string>(%)(?!"\s*(PRI|SCN))</string>
          </dict>
        </array>
      </dict>
      <key>invalid</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>\s+</string>
          </dict>
          <dict>
            <key>name</key>
            <string>invalid.illegal.evi</string>
            <key>match</key>
            <string>\S</string>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>