.TH "evir::BasicBlock" 3 "Wed Apr 27 2022" "Version 0.0.1" "EvIr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
evir::BasicBlock \- A single basic block containing instructions\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <include/ir/basicblock\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBasicBlock\fP (String label)"
.br
.ti -1c
.RI "\fBFunction\fP * \fBget_parent\fP ()"
.br
.ti -1c
.RI "void \fBset_label\fP (String label)"
.br
.ti -1c
.RI "String \fBget_label\fP ()"
.br
.ti -1c
.RI "bool \fBhas_label\fP () const"
.br
.ti -1c
.RI "void \fBremove_label\fP ()"
.br
.ti -1c
.RI "bool \fBhas_terminator\fP () const"
.br
.RI "Checks if the block ends with a terminator instruction\&. "
.ti -1c
.RI "void \fBadd_predecessor\fP (\fBBasicBlock\fP *pred)"
.br
.RI "Adds a predecessing block\&. "
.ti -1c
.RI "String \fBgenerate_ir\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
A single basic block containing instructions\&. 

A basic block is simply a container of instructions that execute sequentially\&. Proper basic blocks should have a list of non-terminating instructions followed by a single terminator instruction\&. Terminator instructions may not occur in the middle of a basic block, and must terminate the block\&. This is not enforced during the 'construction' of the IR\&. 
.SH "Member Function Documentation"
.PP 
.SS "String evir::BasicBlock::generate_ir ()"
Generates the IR for the block 
.PP
\fBReturns\fP
.RS 4
the IR as a string (with a newline) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for EvIr from the source code\&.
